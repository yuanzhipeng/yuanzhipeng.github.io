---
layout: post
Title: "Dubbo基础"
Date: 2020-04-19 16:06:34.00000000 + 09:00
---

# Dubbo基础

### Dubbo是什么

Dubbo是一个分布式、高性能、透明化的RPC服务框架，提供服务自动注册、自动发现等高效服务治理方案，可以和Spring框架无缝集成。

### Dubbo的主要应用场景

* 透明化的远程方法调用，就像调用本地方法一样调用远程方法，只要简单配置，没有任何API侵入
* 软负载均衡及容错机制，可在内网代替F5等硬件负载均衡器，降低成本，减少单点。
* 服务自动注册与发现，不需要写死服务提供方地址，注册中心基于接口名查询服务提供的IP地址，并且能够平滑添加删除服务提供者。

### Dubbo的核心功能

* **Remoting：**网络通信框架，提供对多种NIO框架抽象封装，包括“同步转异步”和“请求-响应”模式的信息交换方式。
* **Cluster：服务框架** 提供基于接口方法的透明远程过程调用，包括多协议支持，以及软负载均衡，失败容错，地址路由，动态配置等集群支持。
* **Registry：服务注册**基于注册中心服务目录，使服务消费方能动态查找服务提供方，使地址透明，使服务提供方可以平滑增加或减少机器。

### Dubbo支持那些协议，美中协议的应用场景，优缺点；

* **Dubbo：**单一长连接和NIO异步通讯，适合大并发小数据量的服务调用，以及消费者远大于提供者。传输协议TCP，异步，Hessian序列化；
* **rmi：**采用JDK标准的rmi协议实现，传输参数和返回参数对象需要实现Serializable接口，使用java标准序列化机制吗使用阻塞式短连接，传输数据包大小混合，TCP协议传输，同步传输，使用常规的远程服务调用和rmi互操作。在依赖低版本的Common-Collections包，java序列化存在安全漏洞；
* **webservice：**基于WebService的远程调用协议，继承CXF实现，提供和原生WebService的互操作。多个短连接，基于HTTP传输，同步传输，适用系用集成和跨语言调用；
* **http:**基于Http表单提交的远程调用协议，使用SPring的HttpInvoke实现。多个短连接，传输协议HTTP，传入参数大小混合，提供者个数多于消费者，需要给应用程序和浏览器JS调用；
* **hessian：**继承Hessian服务，基于HTTP通讯，采用Servlet暴露服务，Dubbo内嵌Jetty作为服务器时默认实现，提供于Hession服务互操作。多个短连接，同步HTTP传输，Hessian序列化，传入参数较大，提供者大雨消费者，提供者压力较大，可传文件。
* **memcache：**基于memcached实现的RPC协议；
* **redis：**基于redis实现的RPC协议；

### Dubbo服务注册与发现流程

#### 流程说明：

* Provider(提供者)绑定指定端口并启动服务
* 提供者连接注册中心，并发本机IP、端口、应用信息和提供服务信息发送至注册中心存储
* Consumer(消费者)，连接注册中心，并发送应用信息、所求服务信息至注册中心
* 注册中心根据消费者所求服务信息匹配对应的提供者列表发送至Consumer应用缓存
* Consumer在发起远程调用时基于缓存的消费者列表择其一发起调用
* Provider状态变更会实时通知注册中心，在注册中心实时推送至Consumer。

### Dubbo框架设计一共划分了10个层：

* **服务接口层(Service):**该层使与实际业务逻辑相关的，根据服务提供方和服务消费方的业务设计对应的接口和实现。
* **配置层(Config)：**对外配置接口，以ServiceConfig和ReferenceConfig为中心。
* **服务代理层(Proxy)：**服务接口透明代理，生成服务的客户端Stub和服务器端Skeleton。
* **服务注册层（Registry）：**封装服务地址的注册与发现，以服务URL为中心。
* **集群层（Cluster）：**封装多个提供者的路由及负载均衡，并桥接注册中心，以Invoker为中心。
* **监控层（Monitor）：**RPC调用次数和调用时间监控。
* 远程调用层（Protocol）：**封装RPC调用，以Invocation和Result为中心，拓展接口为Protocol、Invoker和Exporter。
* **信息交换层（Exchange）：**封装请求响应模式，同步转异步，以Request和Response为中心。
* **网络传输层（Transport）：**抽象mina和netty为统一接口，以Message为中心。

### Dubbo的注册中心集群挂掉，发布者和订阅者之间还能通信么？

可以的，启动dubbo时，消费者会从zookeeper拉取注册的生产者的地址接口等数据，缓存在本地，每次调用时，按照本地存储的地址进行调用。

### Dubbo集群提供了那些负载均衡策略

* **Random LoadBalance（缺省）：**随机选取提供者策略，有利于动态调整提供者权重。截面碰撞率高，调用次数多，分布越均匀；
* **RoundRobin LoanBalance：**轮循选取提供者策略，平均分布，但是存在请求累积问题；
* **LeastActive LoanBalance：**最少活跃调用策略，解决慢提供者接收更少的请求；
* **ConstantHash LoandBalance：**一致性Hash策略，使相同参数请求总是发到同一提供者，一台机器宕机，可以基于虚拟节点，分摊至其他提供者，避免引起提供者的剧烈变动；

### Dubbo的集群容错方案有哪些？

* **Failover Cluster：（缺省）**失败自动切换，当出现失败，重试其他服务器。通常用于读操作，但充实会带来更长延时。
* **Failfast Cluster：**快速失败，只发起一次调用，失败立即报错。通常用于非幂等性的写操作，比如新增记录。
* **Failback Cluster：**失败自动恢复，后台记录失败请求，定时重发。通常用于消息通知操作。
* **Forking Cluster：**并行调用多个服务器，只要一个成功即返回。通常同于实时性要求较高的读操作，但需要浪费更多的服务资源。可通过forks=“2”来设置最大并行数。
* **Broadcast Cluster：**广播调用所有提供者，逐个调用，任意一台报错则报错。通常用于通知所有提供者更新缓存或日志等本地资源信息。
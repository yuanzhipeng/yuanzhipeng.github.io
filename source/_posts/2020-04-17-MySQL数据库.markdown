---
layout: post
Title: "MySQL数据库"
Date: 2020-04-17 16:06:34.00000000 + 09:00
---

## 性能基石 MySQL

### 什么是数据库索引

在关系 数据库中，索引是一种单独的、物理的对数据库表中一列或多列 的值进行排序的一种存储结构，它是某个表中一列或若干列值的集合和相应的志向表中物理标识这些 数值的数据页的逻辑指针清单。索引的作用相当于图书的目录，可以根据目录中的野马快速找到所需的内容。

索引提供只想存储在表的制定劣种的数据值指针，然后根据你制定的排序顺序对这些指针排序。数据库使用索引以找到特定值，然后顺指针找到包含该值的行。这样可以使对应于表的SQL语句执行得更快，可快速访问数据库中的特定信息。

### MySQL索引类型和区别

**普通锁索引：**即一个索引只包含单个列，一个表可以有多个单列索引

**唯一索引：**索引列的值必须唯一，但允许有空值

**复合索引：**即一个索引包含多列

**聚集索引：**InnoDB，数据和索引放到一起

**非聚集索引：**MyIsam，数据和索引文件分开存放



### 如何进行SQL优化？

#### 环境方面

1.尽可能的使用告诉磁盘和大内存

2.服务器使用Linux，并且进行操作系统级别的调优，比如网络参数、避免使用Swap交换区等等

#### SQL相关

1.**先找到慢查询，**慢查询日志，顾名思义，就是查询慢的日志，是指MySQL记录又有执行超过long_query_time参数设定的时间阀值的SQL语句日志。该日志能为SQL的优化带来很好的帮助。默认情况下，慢查询日志是关闭的，要是用慢查询日志功能，首先要开启慢查询日志功能。

* **Slow_query_log**   启动停止记录慢查询日志
* **Slow_query_log_file**   指定慢查询日志得存储路径及文件(默认和数据文件放一起)
* **long_query_time**   指定记录慢查询日志SQL执行时间的阀值(单位：秒，默认10秒)
* **long_queries_not_usinng_indexes**  是否记录未使用索引的SQL
* **long_ooutput**  日志存档的地方 【`TABLE`、`FILE`、`FILE,TABLE`】

2.**分析慢查询日志。**慢查询的 日志记录非常多，要从里面寻找一条查询慢的日志并不是很容易的事情，一般来说东欧需要一些工具辅助才能快速定位到需要优化的SQL语句，比如`Mysqldumpslow`

3.**SQL本身优化，**比如少用自查询 ，in查询改关联查询，不实用外键于级联等等

4.**反范式设计，**字段允许适当冗余，选择合适的字段存储长度等等

5.**使用执行计划分析SQL语句，**使用EXPLAIN关键字可以模拟优化器 执行 SQL查询语句，从而知道MySQL是如何处理你的SQL语句。分析你的查询语句或是表结构的性能瓶颈，至少可以知道：

* 表的读取顺序

* 数据读取操作的操作类型

* 那些索引可以使用

* 那些索引被实际使用

* 表之间的饮用

* 每张表有多少行被优化器查询

  **比如，**执行计划中deype显示的是访问类型 ，是较为重要的一个指标，结果值从最好到最坏依次是：

  ​	**system > const > eq_ref > ref >fulltext > ref_or_null > index_merge > unique_subquery > index_subquery > range > index > ALL **

  一般来说，得保证查询至少达到**range**级别，要求能达到**ref**。

### 优化10 大策略

**1.尽量全值匹配**

​	当简历了索引列侯，能在wherel条件中使用索引的尽量使用。

**2.最佳左前缀法则**

​	如果索引了多列，要最受最左前缀法则。指的是查询从索引的最左前列开始并且不跳过索引中的列。

**3.不再索引列上做任何操作**

​	不再索引列上做任何操作(计算、函数、(自动or手动)类型转换)，会 导致索引失效而转向全表扫描。

**4.范围条件放最后**

​	中间有范围查询会导致后面的索引列全部失效

**5.覆盖索引尽量用**

​	尽量使用覆盖索引(指一个查询语句的执行只用从索引中 就能够取得，不必从数据表中读取)，减少`select * `;

**6.不等于要慎用**

mysql在使用不等于(`!=` 或者`< >`)的时候无法使用索引会导致全表扫描，如果一定需要使用不等于，请使用覆盖索引

**7.Null/Not有影响**

​	注意null/not null 对索引的可能影响；

​	1.自定义为NOT NULL  在字段为not null的情况下，使用is null或 is not null会导致索引失效

​	解决方式：覆盖索引

​	2.自定义为NULL或者不定义

​	Is not null 的情况会导致索引失效		解决方式：覆盖索引

**8.Like查询要当心**

​	like已 通配符开头('%abc...')mysql索引失效会变成全表扫描的操作      解决方式：覆盖索引

**9.自负类型加引号**

​	字符串不加单引号索引失效 

**10.OR改UNION效率高**

​	如果 一定要用OR，那么使用覆盖索引；